<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.haylion.common.repository.mapper.DictItemTMapper">
  <resultMap id="BaseResultMap" type="com.haylion.common.entity.entity.DictItemT">
    <!--@mbg.generated-->
    <!--@Table dict_item_t-->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="left" jdbcType="INTEGER" property="left" />
    <result column="right" jdbcType="INTEGER" property="right" />
    <result column="level" jdbcType="INTEGER" property="level" />
    <result column="create_at" jdbcType="TIMESTAMP" property="createAt" />
    <result column="create_by" jdbcType="VARCHAR" property="createBy" />
    <result column="update_at" jdbcType="TIMESTAMP" property="updateAt" />
    <result column="update_by" jdbcType="VARCHAR" property="updateBy" />
    <result column="deleted" jdbcType="INTEGER" property="deleted" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--@mbg.generated-->
    id, `name`, `left`, `right`, `level`, create_at, create_by, update_at, update_by, 
    deleted
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--@mbg.generated-->
    select 
    <include refid="Base_Column_List" />
    from dict_item_t
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbg.generated-->
    delete from dict_item_t
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.haylion.common.entity.entity.DictItemT">
    insert into dict_item_t (id, `name`, `left`,
      `right`, `level`, create_at, 
      create_by, update_at, update_by, 
      deleted)
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{left,jdbcType=INTEGER}, 
      #{right,jdbcType=INTEGER}, #{level,jdbcType=INTEGER}, #{createAt,jdbcType=TIMESTAMP}, 
      #{createBy,jdbcType=VARCHAR}, #{updateAt,jdbcType=TIMESTAMP}, #{updateBy,jdbcType=VARCHAR}, 
      #{deleted,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.haylion.common.entity.entity.DictItemT" keyProperty="id" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into dict_item_t
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="name != null">
        `name`,
      </if>
      <if test="left != null">
        `left`,
      </if>
      <if test="right != null">
        `right`,
      </if>
      <if test="level != null">
        `level`,
      </if>
      <if test="createAt != null">
        create_at,
      </if>
      <if test="createBy != null">
        create_by,
      </if>
      <if test="updateAt != null">
        update_at,
      </if>
      <if test="updateBy != null">
        update_by,
      </if>
      <if test="deleted != null">
        deleted,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="left != null">
        #{left,jdbcType=INTEGER},
      </if>
      <if test="right != null">
        #{right,jdbcType=INTEGER},
      </if>
      <if test="level != null">
        #{level,jdbcType=INTEGER},
      </if>
      <if test="createAt != null">
        #{createAt,jdbcType=TIMESTAMP},
      </if>
      <if test="createBy != null">
        #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="updateAt != null">
        #{updateAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updateBy != null">
        #{updateBy,jdbcType=VARCHAR},
      </if>
      <if test="deleted != null">
        #{deleted,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.haylion.common.entity.entity.DictItemT">
    <!--@mbg.generated-->
    update dict_item_t
    <set>
      <if test="name != null">
        `name` = #{name,jdbcType=VARCHAR},
      </if>
      <if test="left != null">
        `left` = #{left,jdbcType=INTEGER},
      </if>
      <if test="right != null">
        `right` = #{right,jdbcType=INTEGER},
      </if>
      <if test="level != null">
        `level` = #{level,jdbcType=INTEGER},
      </if>
      <if test="createAt != null">
        create_at = #{createAt,jdbcType=TIMESTAMP},
      </if>
      <if test="createBy != null">
        create_by = #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="updateAt != null">
        update_at = #{updateAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updateBy != null">
        update_by = #{updateBy,jdbcType=VARCHAR},
      </if>
      <if test="deleted != null">
        deleted = #{deleted,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.haylion.common.entity.entity.DictItemT">
    <!--@mbg.generated-->
    update dict_item_t
    set `name` = #{name,jdbcType=VARCHAR},
      `left` = #{left,jdbcType=INTEGER},
      `right` = #{right,jdbcType=INTEGER},
      `level` = #{level,jdbcType=INTEGER},
      create_at = #{createAt,jdbcType=TIMESTAMP},
      create_by = #{createBy,jdbcType=VARCHAR},
      update_at = #{updateAt,jdbcType=TIMESTAMP},
      update_by = #{updateBy,jdbcType=VARCHAR},
      deleted = #{deleted,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateBatchSelective" parameterType="java.util.List">
    <!--@mbg.generated-->
    update dict_item_t
    <trim prefix="set" suffixOverrides=",">
      <trim prefix="`name` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.name != null">
            when id = #{item.id,jdbcType=INTEGER} then #{item.name,jdbcType=VARCHAR}
          </if>
        </foreach>
      </trim>
      <trim prefix="`left` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.left != null">
            when id = #{item.id,jdbcType=INTEGER} then #{item.left,jdbcType=INTEGER}
          </if>
        </foreach>
      </trim>
      <trim prefix="`right` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.right != null">
            when id = #{item.id,jdbcType=INTEGER} then #{item.right,jdbcType=INTEGER}
          </if>
        </foreach>
      </trim>
      <trim prefix="`level` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.level != null">
            when id = #{item.id,jdbcType=INTEGER} then #{item.level,jdbcType=INTEGER}
          </if>
        </foreach>
      </trim>
      <trim prefix="create_at = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.createAt != null">
            when id = #{item.id,jdbcType=INTEGER} then #{item.createAt,jdbcType=TIMESTAMP}
          </if>
        </foreach>
      </trim>
      <trim prefix="create_by = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.createBy != null">
            when id = #{item.id,jdbcType=INTEGER} then #{item.createBy,jdbcType=VARCHAR}
          </if>
        </foreach>
      </trim>
      <trim prefix="update_at = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.updateAt != null">
            when id = #{item.id,jdbcType=INTEGER} then #{item.updateAt,jdbcType=TIMESTAMP}
          </if>
        </foreach>
      </trim>
      <trim prefix="update_by = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.updateBy != null">
            when id = #{item.id,jdbcType=INTEGER} then #{item.updateBy,jdbcType=VARCHAR}
          </if>
        </foreach>
      </trim>
      <trim prefix="deleted = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.deleted != null">
            when id = #{item.id,jdbcType=INTEGER} then #{item.deleted,jdbcType=INTEGER}
          </if>
        </foreach>
      </trim>
    </trim>
    where id in
    <foreach close=")" collection="list" item="item" open="(" separator=", ">
      #{item.id,jdbcType=INTEGER}
    </foreach>
  </update>
  <insert id="batchInsert" parameterType="map">
    <!--@mbg.generated-->
    insert into dict_item_t
    (id, `name`, `left`, `right`, `level`, create_at, create_by, update_at, update_by, 
      deleted)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.id,jdbcType=INTEGER}, #{item.name,jdbcType=VARCHAR}, #{item.left,jdbcType=INTEGER}, 
        #{item.right,jdbcType=INTEGER}, #{item.level,jdbcType=INTEGER}, #{item.createAt,jdbcType=TIMESTAMP}, 
        #{item.createBy,jdbcType=VARCHAR}, #{item.updateAt,jdbcType=TIMESTAMP}, #{item.updateBy,jdbcType=VARCHAR}, 
        #{item.deleted,jdbcType=INTEGER})
    </foreach>
  </insert>
  <select id="getAncestorsByLeftAndRight" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from dict_item_t
    <where>
      `left` &lt; #{left}
              and `right` &gt; #{right}
              and
              deleted = ${@com.haylion.common.core.constant.CommonConstant@DELETED_NO}
    </where>
  </select>
  <update id="updateLeftForAdd">
    update
            dict_item_t
    set `left` = `left` + 2
    where `left` &gt;= #{right}
      and deleted = ${@com.haylion.common.core.constant.CommonConstant@DELETED_NO}
  </update>

  <update id="updateRightForAdd">
    update
            dict_item_t
    set `right` = `right` + 2
    where `right` &gt;= #{right}
      and deleted = ${@com.haylion.common.core.constant.CommonConstant@DELETED_NO}
  </update>

  <select id="count" resultType="java.lang.Integer">
    select count(*)
    from dict_item_t
    where deleted = ${@com.haylion.common.core.constant.CommonConstant@DELETED_NO}
  </select>

  <update id="updateLeftForDelete">
    update dict_item_t
    set `left` = `left` - (#{left} - #{right} + 1)
        <where>
            `left` &gt; #{left}
                    and
                    deleted = ${@com.haylion.common.core.constant.CommonConstant@DELETED_NO}
        </where>
    </update>
    <update id="updateRightForDelete">
     update dict_item_t
    set `right` = `right` - (#{left} - #{right} + 1)
        <where>
            `right` > #{right}
                    and
                    deleted = ${@com.haylion.common.core.constant.CommonConstant@DELETED_NO}
    </where>
    </update>
  <update id="deleteSubTree">
    update dict_item_t
    set deleted = ${@com.haylion.common.core.constant.CommonConstant@DELETED_YES},
    update_at = #{deleteAt},
    update_by = #{deleteBy}
    <where>
      `left` &gt;= #{left}
              and `right` &lt;= #{right}
    </where>
  </update>
  <select id="getDictItemByLevel" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from dict_item_t
    <where>
      level = #{level}
              and deleted = ${@com.haylion.common.core.constant.CommonConstant@DELETED_NO}
    </where>
  </select>

  <select id="getDirectChildren" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from dict_item_t
    <where>
      `left` &gt; #{left}
              and `right` &lt; #{right}
              and level = #{level} + 1
              and deleted = ${@com.haylion.common.core.constant.CommonConstant@DELETED_NO}
    </where>
  </select>
    <select id="getRootDictItem" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from dict_item_t
        <where>
            level = 0
                    and deleted = ${@com.haylion.common.core.constant.CommonConstant@DELETED_NO}
        </where>
    </select>
    <select id="selectById" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from dict_item_t
        <where>
            id = #{id}
                    and deleted = ${@com.haylion.common.core.constant.CommonConstant@DELETED_NO}
        </where>
</select>

<!--  <select id="getCameraOnAreasByLevel" resultType="com.haylion.common.entity.dto.CameraLocationDto">-->
<!--      select hat.id                   as pointId,-->
<!--             hat.name                 as pointName,-->
<!--             (${@ com.haylion.stagecoach.common.core.constant.CameraConstant@LOCATION_OF_AREA}) as pointType-->
<!--      from dict_item_t hat-->
<!--      <where>-->
<!--          hat.level = #{level}-->
<!--          <if test="left != null">-->
<!--          and hat.left &gt; #{left}-->
<!--          </if>-->
<!--          <if test="right != null">-->
<!--          and hat.`right` &lt; #{right}-->
<!--          </if>-->
<!--          and hat.deleted = ${@com.haylion.common.core.constant.CommonConstant@DELETED_NO}-->
<!--      </where>-->
<!--    order by hat.`left` asc-->
<!--  </select>-->
    <select id="getAllFamilyIdsByParentId" resultType="java.lang.Integer">
        select id
        from dict_item_t
        <where>
            <if test="left != null">
                `left` &gt;= #{left}
            </if>
            <if test="right != null">
                and `right` &lt;= #{right}
            </if>
            and deleted = ${@com.haylion.common.core.constant.CommonConstant@DELETED_NO}
        </where>
    </select>
    <select id="selectListByName" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from dict_item_t
        <where>
            <if test="name != null and name != ''">
                name like concat('%', #{name}, '%')
            </if>
            and deleted = ${@com.haylion.common.core.constant.CommonConstant@DELETED_NO}
        </where>
        order by `left` desc
    </select>

      <select id="getAllFamilyByParentId" resultType="com.haylion.common.entity.entity.DictItemT">
        select
        <include refid="Base_Column_List"/>
        from dict_item_t
        <where>
            <if test="left != null">
                `left` &gt;= #{left}
            </if>
            <if test="right != null">
                and `right` &lt;= #{right}
            </if>
            and deleted = ${@com.haylion.common.core.constant.CommonConstant@DELETED_NO}
        </where>
    </select>
</mapper>